# Java 代码标准

## 1. 代码风格
- 使用 4 个空格缩进
- 行长度不超过 120 字符
- 使用大括号，即使只有一行代码
- 类名和文件名一致
- 包名使用小写字母

## 2. 命名规范
- 类名使用 PascalCase
- 方法和变量使用 camelCase
- 常量使用 UPPER_SNAKE_CASE
- 包名使用小写字母
- 接口名使用 PascalCase

## 3. 类设计
- 单一职责原则
- 开闭原则
- 里氏替换原则
- 接口隔离原则
- 依赖倒置原则

## 4. 方法设计
- 方法应该短小精悍（不超过 50 行）
- 单一职责原则
- 参数数量不超过 5 个
- 避免副作用
- 返回值类型应该明确

## 5. 异常处理
- 使用具体的异常类型
- 避免捕获过于宽泛的 Exception
- 提供有意义的错误信息
- 使用 try-with-resources 处理资源
- 合理使用 checked 和 unchecked 异常

## 6. 集合使用
- 优先使用接口而非实现
- 使用泛型确保类型安全
- 避免使用原始类型
- 合理选择集合类型
- 使用 Stream API 处理集合

## 7. 并发编程
- 使用线程安全的集合
- 避免共享可变状态
- 使用 synchronized 或 Lock
- 优先使用 CompletableFuture
- 避免使用 Thread 直接创建线程

## 8. 性能考虑
- 避免在循环中创建对象
- 使用 StringBuilder 进行字符串拼接
- 合理使用缓存
- 避免不必要的装箱拆箱
- 使用适当的数据结构

## 9. 安全考虑
- 验证用户输入
- 避免 SQL 注入
- 使用参数化查询
- 避免硬编码敏感信息
- 使用安全的随机数生成器

## 10. 测试规范
- 编写单元测试
- 使用 JUnit 5
- 测试覆盖率不低于 80%
- 使用描述性的测试名称
- 测试应该独立且可重复

## 11. 文档规范
- 使用 Javadoc 注释
- 为公共 API 编写文档
- 使用有意义的注释
- 避免无用的注释
- 保持文档与代码同步

## 12. 代码组织
- 按功能组织包结构
- 使用有意义的包名
- 避免过长的类
- 使用适当的访问修饰符
- 遵循 DRY 原则

## 13. 依赖管理
- 使用 Maven 或 Gradle
- 明确指定依赖版本
- 避免传递依赖冲突
- 定期更新依赖
- 使用依赖范围

## 14. 日志规范
- 使用 SLF4J 作为日志门面
- 使用适当的日志级别
- 避免在日志中记录敏感信息
- 使用结构化日志
- 合理配置日志输出 