# JavaScript 代码标准

## 1. 代码风格
- 使用 2 个空格缩进
- 使用分号结尾
- 使用单引号
- 行长度不超过 100 字符
- 使用 ES6+ 语法

## 2. 命名规范
- 变量和函数使用 camelCase
- 类名使用 PascalCase
- 常量使用 UPPER_SNAKE_CASE
- 私有属性使用下划线前缀

## 3. 函数规范
- 函数应该短小精悍（不超过 50 行）
- 单一职责原则
- 避免副作用
- 使用箭头函数作为回调
- 参数数量不超过 5 个

## 4. 错误处理
- 使用 try-catch 处理异步错误
- 提供有意义的错误信息
- 避免忽略错误
- 使用 Promise 处理异步操作
- 合理使用 async/await

## 5. 模块规范
- 使用 ES6 模块语法
- 避免循环依赖
- 导出应该明确
- 使用命名导出而非默认导出
- 模块应该单一职责

## 6. 变量声明
- 优先使用 const
- 其次使用 let
- 避免使用 var
- 变量声明在作用域顶部
- 避免重复声明

## 7. 对象和数组
- 使用对象解构
- 使用数组解构
- 使用展开运算符
- 避免直接修改参数
- 使用 Object.assign 或展开运算符创建新对象

## 8. 异步编程
- 使用 Promise 而非回调
- 使用 async/await 简化异步代码
- 处理 Promise 拒绝
- 避免回调地狱
- 使用 Promise.all 处理并发

## 9. 性能考虑
- 避免在循环中创建函数
- 使用事件委托
- 合理使用缓存
- 避免频繁的 DOM 操作
- 使用防抖和节流

## 10. 安全考虑
- 验证用户输入
- 避免 XSS 攻击
- 使用 HTTPS
- 避免在客户端存储敏感信息
- 使用 CSP 策略

## 11. 测试规范
- 编写单元测试
- 使用 Jest 或 Mocha
- 测试覆盖率不低于 80%
- 使用描述性的测试名称
- 测试应该独立且可重复

## 12. 代码组织
- 按功能组织代码
- 使用有意义的文件名
- 避免过长的文件
- 使用适当的注释
- 遵循 DRY 原则 